<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BioRuby MAF blog]]></title>
  <link href="http://csw.github.com/bioruby-maf/atom.xml" rel="self"/>
  <link href="http://csw.github.com/bioruby-maf/"/>
  <updated>2012-05-21T13:57:32-04:00</updated>
  <id>http://csw.github.com/bioruby-maf/</id>
  <author>
    <name><![CDATA[Clayton Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic MAF parsing]]></title>
    <link href="http://csw.github.com/bioruby-maf/blog/2012/05/21/basic-maf-parsing/"/>
    <updated>2012-05-21T13:43:00-04:00</updated>
    <id>http://csw.github.com/bioruby-maf/blog/2012/05/21/basic-maf-parsing</id>
    <content type="html"><![CDATA[<p>Today is the official start of coding for GSoC. Following my
<a href="https://github.com/csw/bioruby-maf/wiki/Original-proposal">initial plan</a>,
I&#8217;m going to begin by implementing the basics of MAF parsing in
Ruby. I&#8217;ve already got Cucumber features defined for
<a href="https://github.com/csw/bioruby-maf/blob/master/features/maf-parsing.feature">basic MAF parsing</a>
and
<a href="https://github.com/csw/bioruby-maf/blob/master/features/maf-to-fasta.feature">conversion to FASTA</a>,
along with
<a href="https://github.com/csw/bioruby-maf/tree/master/test/data">reference data</a>
as processed by bx-python.</p>

<p>This should be fairly straightforward to implement, but I&#8217;m going to
wait until I&#8217;ve got this basic functionality running before I define
anything else in detail. I&#8217;m still weighing whether it will make sense
to have a &#8216;raw&#8217; representation of sequences and alignment blocks
rather than just using (and presumably subclassing) the
<a href="https://github.com/pjotrp/bioruby-alignment">bio-alignment</a>
representations.</p>

<p>Once basic MAF parsing works, my next area to focus on will be indexed
access. Many use cases for MAF involve pulling a few alignments out of
very large data files, rather than batch-processing the whole
file. I&#8217;ll be focusing on the indexed-access API at first, and
building a simple interim indexing scheme similar to that used by
Biopython, probably using SQLite in a similar way. In developing the
API, I&#8217;ll study those provided by bx-python and Biopython, the two
other MAF implementations providing persistent indexing.</p>

<p>Ultimately, I plan to revisit my actual indexing method, and
potentially implement support for bx-python&#8217;s
<a href="https://bitbucket.org/james_taylor/bx-python/src/07aca5a9f6fc/lib/bx/interval_index_file.py">interval index files</a>. I&#8217;ll
also take a careful look at other database alternatives such as
Berkeley DB and Tokyo Cabinet.</p>

<p>P.S. For my next blog post, I think I will try using Markdown&#8217;s
<a href="http://daringfireball.net/projects/markdown/syntax#link">reference-style links</a>,
since the raw source for these posts is getting unwieldy with inline
links.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Week 2]]></title>
    <link href="http://csw.github.com/bioruby-maf/blog/2012/05/21/week_2_progress/"/>
    <updated>2012-05-21T11:13:00-04:00</updated>
    <id>http://csw.github.com/bioruby-maf/blog/2012/05/21/week_2_progress</id>
    <content type="html"><![CDATA[<p>This was my second week of work on my GSoC project, and the last week
of the &#8216;community bonding&#8217; period before the official start of
coding. A major focus of mine was BioRuby&#8217;s
<a href="http://phyloxml.org/">phyloXML</a> support; it uses libxml, which has
been causing unit test failures under JRuby. In the end, the best
course of action seemed to separate the phyloXML support as a separate
plugin, which I have done as the
<a href="https://github.com/csw/bioruby-phyloxml">bio-phyloxml</a> gem. This will
remove BioRuby&#8217;s dependency on XML libraries entirely and that JRuby
issue along with it. At the same time, users of the phyloXML code
should be able to continue using it with no substantive changes.</p>

<p>Separately, I began porting this phyloXML code to use
<a href="http://nokogiri.org/">Nokogiri</a> instead of libxml-ruby, but ran into
difficulties with this effort. While it is possible, and the library
APIs are very similar, the code uses relatively low-level XML
processing APIs in ways that seem to be sensitive to subtle
differences in text node and namespace semantics between the two
libraries. Substantial restructuring of the code and the addition of
quite a few unit tests might be necessary to carry out such a port
with confidence that the resulting code would work well.</p>

<p>Also, someone else submitted a
<a href="https://github.com/jruby/jruby/pull/176">JRuby patch</a> for
<a href="http://jira.codehaus.org/browse/JRUBY-6658">JRUBY-6658</a>, one of the
major causes of BioRuby&#8217;s unit test failures with JRuby; once a fix is
integrated, we&#8217;ll be close to having all the tests passing under
JRuby.</p>

<p>I identified another JRuby bug,
<a href="http://jira.codehaus.org/browse/JRUBY-6666">JRUBY-6666</a>, causing
several unit test failures. This one affects BioRuby&#8217;s code for
running external commands, so it would be likely to be encountered in
production use. For this one, I also worked up a
<a href="https://github.com/jruby/jruby/pull/173">patch</a>.</p>

<p>I also spent some time preparing a performance testing environment,
for evaluating existing MAF implementations as well as my own. This
will be important, since I will be considering the use of an existing
C parser. I will also want to ensure that the performance of my code
is competitive with the alternatives. Lacking any hardware more
powerful than a MacBook Air, I am setting this up with Amazon EC2. To
simplify environment setup, I&#8217;ll be using
<a href="http://wiki.opscode.com/display/chef/Home">Chef</a>. I&#8217;ve already set up
a <a href="https://github.com/csw/chef-repo">Chef repository</a> with
configuration logic, and some
<a href="https://github.com/csw/ec2-launcher">rudimentary code</a> to streamline
launching Ubuntu machines on EC2 and bootstrapping a Chef
environment. To save money, I plan to make use of
<a href="http://aws.amazon.com/ec2/spot-instances/">EC2 Spot Instances</a>, which
are perfect for instances that only need to run for a few hours for
batch tasks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Week 1]]></title>
    <link href="http://csw.github.com/bioruby-maf/blog/2012/05/13/progress/"/>
    <updated>2012-05-13T18:14:00-04:00</updated>
    <id>http://csw.github.com/bioruby-maf/blog/2012/05/13/progress</id>
    <content type="html"><![CDATA[<p>This has been my first half-week of work on my Google Summer of Code
project, and it&#8217;s off to an exciting start. The first order of
business has been to get my development environment together; since
I&#8217;ve been a microbiology student instead of a programmer for the last
year, it&#8217;s taken some work. In that process, I&#8217;ve ended up making a
few <a href="https://github.com/michaelklishin/cucumber.el/pull/21">open</a>
<a href="https://github.com/nibrahim/Hyde/pull/6">source</a>
<a href="https://github.com/nibrahim/Hyde/pull/7">contributions</a> just to get
my tools working the way I want. I&#8217;m running GNU Emacs 24 and trying
to take more advantage of it than I have in the past. I&#8217;ll have much
more to say about this in a future post.</p>

<p>I&#8217;ve also started working on the BioRuby unit test
<a href="http://travis-ci.org/#!/bioruby/bioruby/jobs/1296529">failures</a> under
JRuby, as a way of familiarizing myself with the BioRuby code base as
well as the community and its development processes. Right now, JRuby
in 1.8 mode is showing 6 failures and 126 errors, which is hardly
confidence-inspiring for people considering using JRuby with
BioRuby. This is too bad, since JRuby has some definite advantages as
a Ruby implementation. After looking into these failures, I&#8217;ve broken them
down into a few categories:</p>

<ul>
<li>temporary file permissions problems, likely due to some sort of Travis-CI
environment issue</li>
<li>a bug in JRuby&#8217;s implementation of
<a href="http://ruby-doc.org/stdlib-1.8.7/libdoc/open3/rdoc/Open3.html#method-c-popen3">Open3.popen3</a>
which I&#8217;m working up a bug report for</li>
<li>an odd autoload problem I&#8217;ve filed
<a href="https://jira.codehaus.org/browse/JRUBY-6658">JRUBY-6658</a> for and
sent an accompanying
<a href="https://github.com/rubyspec/rubyspec/pull/136">RubySpec patch</a>
for</li>
<li>a problem with libxml-jruby, which appears unmaintained, for which
I&#8217;ve submitted a
<a href="https://github.com/bioruby/bioruby/pull/55">BioRuby patch</a> plus
<a href="http://jira.codehaus.org/browse/JRUBY-6662">JRUBY-6662</a></li>
<li>and a small test case bug relating to floating point handling,
which I&#8217;ve submitted a
<a href="https://github.com/bioruby/bioruby/pull/54">patch</a> for.</li>
</ul>


<p>Once these are resolved, JRuby should be passing the BioRuby unit
tests in 1.8 mode, and closer to passing in 1.9 mode. (There are a few
extra failures under 1.9 that I haven&#8217;t sorted through yet.)</p>

<p>I&#8217;ve also gotten a start on my project itself, creating the
<a href="https://github.com/csw/bioruby-maf">bioruby-maf</a> Github repository
with a project skeleton and writing my
<a href="https://github.com/csw/bioruby-maf/blob/79004f9b75c1e33f9b265a1a97241d3c9d382997/features/maf-to-fasta.feature">first Cucumber feature</a>
for it. This is, in fact, my first Cucumber feature ever. However, I
did spend a few cross-country flights reading the
<a href="http://pragprog.com/book/achbd/the-rspec-book">RSpec</a> and
<a href="http://pragprog.com/book/hwcuc/the-cucumber-book">Cucumber</a> books
last week; between that and cribbing from
<a href="https://github.com/pjotrp/bioruby-alignment/tree/master/features">Pjotr&#8217;s code</a>
I feel like I have some idea what I&#8217;m doing. Just assembling that
feature has been useful, too, since I&#8217;ve had to get several of the
existing MAF tools running on my machine. In fact, my test MAF data and
the FASTA version of it are courtesy of
<a href="https://bitbucket.org/james_taylor/bx-python/wiki/Home">bx-python</a>,
which will be my reference implementation in many respects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://csw.github.com/bioruby-maf/blog/2012/05/09/hello-world/"/>
    <updated>2012-05-09T19:33:00-04:00</updated>
    <id>http://csw.github.com/bioruby-maf/blog/2012/05/09/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World! This blog will be tracking the development of <a href="https://github.com/csw/bioruby-maf">bio-maf</a>, a <a href="https://cgwb.nci.nih.gov/FAQ/FAQformat.html#format5">Multiple Alignment Format</a> (MAF) parser for the Ruby bioinformatics library <a href="http://bioruby.open-bio.org/">BioRuby</a>, as part of the Google Summer of Code 2012. I&#8217;m Clayton Wheeler, a programmer and a biology student at the University of Michigan. This is exciting for me as my first substantial open source project, and as a way to write hopefully-useful bioinformatics software. And thanks, Google, for making this possible.</p>

<p>In my next post I&#8217;ll discuss what MAF is, what it&#8217;s useful for, and how I&#8217;m planning to approach the project. I&#8217;ll be making weekly status posts, plus others as inspiration strikes.</p>
]]></content>
  </entry>
  
</feed>
